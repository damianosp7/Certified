package com.example.certified.model;

import java.util.Collection;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.Size;

@Entity
@Table(name =  "user", uniqueConstraints = @UniqueConstraint(columnNames = "email"))
public class User {
    /** Autogenerated Id for every User in database(primary key)*/
    @Id
    @GeneratedValue(strategy =  GenerationType.IDENTITY)
    private Long id;

    /** The User's FirstName*/
    @NotEmpty(message = "Field can't be empty!")
    @Size(min = 2, message = "The FirstName should have at least 2 characters")
    @Column(name = "first_name")
    private String firstName;

    /** The User's LastName*/
    @NotEmpty(message = "Field can't be empty!")
    @Size(min = 2, message = "The LastName should have at least 2 characters")
    @Column(name = "last_name")
    private String lastName;

    /** The User's email address (must be valid and unique)*/
    @NotEmpty(message = "Field can't be empty!")
    @Email
    private String email;


    /**Password must be at least 6 characters long*/
    @NotEmpty(message = "Field can't be empty!")
    @Size( min = 6, message = "The password must be at least 6 characters")
    private String password;

    /**ResetPasswordToken to authenticate the user who tries to reset his password*/
    private String resetPasswordToken;

    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
    @JoinTable(
            name = "users_roles",
            joinColumns = @JoinColumn(
                    name = "user_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(
                    name = "role_id", referencedColumnName = "id"))



    private Collection<Role> roles;

    public User() {

    }

    public User(String firstName, String lastName, String email, String password, Collection<Role> roles) {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.roles = roles;
    }
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public String getPassword() {
        return password;
    }
    public void setPassword(String password) {
        this.password = password;
    }
    public Collection<Role> getRoles() {
        return roles;
    }
    public void setRoles(Collection<Role> roles) {
        this.roles = roles;
    }
    public String getResetPasswordToken() {return resetPasswordToken;}
    public void setResetPasswordToken(String resetPasswordToken) { this.resetPasswordToken = resetPasswordToken; }
}
